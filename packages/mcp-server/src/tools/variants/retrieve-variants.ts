// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'scalev-mcp/filtering';
import { Metadata, asTextContentResult } from 'scalev-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import ScalevAPI from 'scalev-api';

export const metadata: Metadata = {
  resource: 'variants',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/v2/variants/{id}',
  operationId: 'ScalevApiWeb.ProductController.show_variant',
};

export const tool: Tool = {
  name: 'retrieve_variants',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nShows a single product variant by ID.\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {\n    code: {\n      type: 'integer'\n    },\n    data: {\n      type: 'object',\n      title: 'Variant',\n      properties: {\n        id: {\n          type: 'integer',\n          description: 'Variant primary key'\n        },\n        cogs: {\n          type: 'number',\n          description: 'Cost of Goods Sold'\n        },\n        cogs_bt: {\n          type: 'number',\n          description: 'Cost of Goods Sold before tax'\n        },\n        created_at: {\n          type: 'string',\n          description: 'Timestamp when the variant was created',\n          format: 'date-time'\n        },\n        digital_product_files: {\n          type: 'array',\n          description: 'List of digital product files associated with the variant',\n          items: {\n            type: 'object',\n            title: 'DigitalProductFile',\n            properties: {\n              id: {\n                type: 'integer',\n                description: 'Digital product file primary key'\n              },\n              content_type: {\n                type: 'string',\n                description: 'MIME type of the digital product file'\n              },\n              name: {\n                type: 'string',\n                description: 'File name of the digital product file'\n              },\n              size_in_bytes: {\n                type: 'integer',\n                description: 'Size of the digital product file in bytes'\n              },\n              url: {\n                type: 'string',\n                description: 'URL to access the digital product file'\n              }\n            }\n          }\n        },\n        display: {\n          type: 'string',\n          description: 'Display name for the variant'\n        },\n        fullname: {\n          type: 'string',\n          description: 'Full name of the variant'\n        },\n        images: {\n          type: 'array',\n          description: 'List of image URLs associated with the variant',\n          items: {\n            type: 'string'\n          }\n        },\n        is_checked: {\n          type: 'boolean',\n          description: 'Mark variant as sellable'\n        },\n        is_editable: {\n          type: 'boolean',\n          description: 'Indicates if the variant is editable'\n        },\n        item_type: {\n          type: 'string',\n          description: 'Type of the product item',\n          enum: [            'physical',\n            'digital',\n            'course'\n          ]\n        },\n        last_updated_at: {\n          type: 'string',\n          description: 'Timestamp when the variant was last updated',\n          format: 'date-time'\n        },\n        metadata: {\n          type: 'object',\n          description: 'Additional metadata associated with the variant',\n          additionalProperties: true\n        },\n        name: {\n          type: 'string',\n          description: 'Full name of the variant'\n        },\n        option1_value: {\n          type: 'string',\n          description: 'Value of the first product option'\n        },\n        option2_value: {\n          type: 'string',\n          description: 'Value of the second product option'\n        },\n        option3_value: {\n          type: 'string',\n          description: 'Value of the third product option'\n        },\n        price: {\n          type: 'number',\n          description: 'Price of the variant'\n        },\n        price_bt: {\n          type: 'number',\n          description: 'Price before tax'\n        },\n        product: {\n          type: 'object',\n          title: 'Product',\n          properties: {\n            id: {\n              type: 'integer',\n              description: 'Product ID'\n            },\n            business: {\n              type: 'object',\n              title: 'BusinessSimple',\n              properties: {\n                id: {\n                  type: 'integer',\n                  description: 'Business ID'\n                },\n                account_holder: {\n                  type: 'string',\n                  description: 'Name of the account holder'\n                },\n                email: {\n                  type: 'string',\n                  description: 'Email address of the business'\n                },\n                is_banned: {\n                  type: 'boolean',\n                  description: 'Is the business banned?'\n                },\n                logo: {\n                  type: 'string',\n                  description: 'URL to the business logo'\n                },\n                unique_id: {\n                  type: 'string',\n                  description: 'Unique identifier for the business'\n                },\n                username: {\n                  type: 'string',\n                  description: 'Username of the business'\n                }\n              }\n            },\n            description: {\n              type: 'string',\n              description: 'Description'\n            },\n            display: {\n              type: 'string',\n              description: 'Product name for display'\n            },\n            is_inventory: {\n              type: 'boolean',\n              description: 'Is Inventory'\n            },\n            is_multiple: {\n              type: 'boolean',\n              description: 'Is Multiple'\n            },\n            is_product_sharing: {\n              type: 'boolean',\n              description: 'Is Product Sharing'\n            },\n            item_type: {\n              type: 'string',\n              title: 'ItemType',\n              description: 'Type of the product item',\n              enum: [                'physical',\n                'digital',\n                'course'\n              ]\n            },\n            item_type_name: {\n              type: 'string',\n              description: 'Item Type Name'\n            },\n            name: {\n              type: 'string',\n              description: 'Product Name'\n            },\n            option1_name: {\n              type: 'string',\n              description: 'Option 1 Name'\n            },\n            option2_name: {\n              type: 'string',\n              description: 'Option 2 Name'\n            },\n            option3_name: {\n              type: 'string',\n              description: 'Option 3 Name'\n            },\n            uuid: {\n              type: 'string',\n              description: 'Product UUID'\n            }\n          }\n        },\n        product_name: {\n          type: 'string',\n          description: 'Name of the associated product'\n        },\n        reseller_price: {\n          type: 'number',\n          description: 'Reseller price of the variant'\n        },\n        reseller_price_bt: {\n          type: 'number',\n          description: 'Reseller price before tax'\n        },\n        self_file_urls: {\n          type: 'array',\n          description: 'List of self file URLs associated with the variant',\n          items: {\n            type: 'string'\n          }\n        },\n        sku: {\n          type: 'string',\n          description: 'Stock Keeping Unit'\n        },\n        unique_id: {\n          type: 'string',\n          description: 'Variant unique identifier'\n        },\n        uuid: {\n          type: 'string',\n          description: 'Variant UUID'\n        },\n        weight: {\n          type: 'integer',\n          description: 'Weight of the variant in grams'\n        }\n      }\n    },\n    status: {\n      type: 'string'\n    }\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      id: {
        type: 'integer',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: ['id'],
  },
  annotations: {
    readOnlyHint: true,
  },
};

export const handler = async (client: ScalevAPI, args: Record<string, unknown> | undefined) => {
  const { id, jq_filter, ...body } = args as any;
  return asTextContentResult(await maybeFilter(jq_filter, await client.variants.retrieve(id)));
};

export default { metadata, tool, handler };
